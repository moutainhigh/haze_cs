<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.info.back.dao.ICountCollectionAssessmentDao">
	<resultMap id="queryResultMap" type="com.info.web.pojo.cspojo.CountCollectionAssessment">
		<!-- id -->
		<result column="id" property="id"/>
		<!--  -->
		<result column="person_id" property="personId" jdbcType="VARCHAR"/>
		<!-- 姓名 -->
		<result column="person_name" property="personName" jdbcType="VARCHAR"/>
		<!-- 催单公司id -->
		<result column="company_id" property="companyId" jdbcType="VARCHAR"/>
		<!-- 催单公司名称 -->
		<result column="company_title" property="companyTitle" jdbcType="VARCHAR"/>
		<!-- 催收员分组（3，4，5，6，7对应S1，S2，M1-M2，M2-M3，M3+对应1-10,11-30（1），1个月-2个月，2个月-3个月，3个月+） -->
		<result column="group_id" property="groupId" jdbcType="VARCHAR"/>
		<!-- 催收员分组组名 -->
		<result column="group_name" property="groupName" jdbcType="VARCHAR"/>
		<!-- 订单分组 -->
		<result column="order_group_id" property="orderGroupId" jdbcType="VARCHAR"/>
		<!-- 订单分组组名 -->
		<result column="order_group_name" property="groupOrderName" jdbcType="VARCHAR"/>
		<!-- 本金 -->
		<result column="loan_money" property="loanMoney" jdbcType="DECIMAL"/>
		<!-- 已还本金 -->
		<result column="repayment_money" property="repaymentMoney" jdbcType="DECIMAL"/>
		<!-- 未还本金 -->
		<result column="not_yet_repayment_money" property="notYetRepaymentMoney" jdbcType="DECIMAL"/>
		<!-- 本金还款率 -->
		<result column="repayment_reta" property="repaymentReta" jdbcType="DECIMAL"/>
		<!-- 迁徙率 -->
		<result column="migrate_rate" property="migrateRate" jdbcType="DECIMAL"/>
		<!-- 滞纳金总额-->
		<result column="penalty" property="penalty" jdbcType="DECIMAL"/>
		<!-- 已还滞纳金 -->
		<result column="repayment_penalty" property="repaymentPenalty" jdbcType="DECIMAL"/>
		<!-- 待还滞纳金 -->
		<result column="not_repayment_penalty" property="notRepaymentPenalty" jdbcType="DECIMAL"/>
		<!-- 滞纳金回款率 -->
		<result column="penalty_repayment_reta" property="penaltyRepaymentReta" jdbcType="DECIMAL"/>
		<!-- 订单总数 -->
		<result column="order_total" property="orderTotal" jdbcType="INTEGER"/>
		<!-- 已处理订单数 -->
		<result column="dispose_order_num" property="disposeOrderNum" jdbcType="INTEGER"/>
		<!-- 已还款订单数 -->
		<result column="repayment_order_num" property="repaymentOrderNum" jdbcType="INTEGER"/>
		<!-- 订单还款率 -->
		<result column="repayment_order_rate" property="repaymentOrderRate" jdbcType="DECIMAL"/>
		<!-- 统计时间 -->
		<result column="count_date" property="countDate" jdbcType="TIMESTAMP"/>
	</resultMap>
	<!-- 保存,保存不为NULL的字段 -->
	<!-- 执行存储过程 -->
	<select id="callAssessment" parameterType="HashMap" statementType="CALLABLE"> 
	  {call P_COUNT_COLLECTION_ASSESS(#{currDate,jdbcType=TIMESTAMP,mode=IN})}
	</select>

	<!-- 执行存储过程 -->
	<select id="callMGroupAssessment" parameterType="HashMap" statementType="CALLABLE"> 
	  {call P_COUNT_M_GROUP_ASSESS(#{currDate,jdbcType=TIMESTAMP,mode=IN},#{isFirstDay,jdbcType=INTEGER,mode=IN})}
	</select>
	
	
	<sql id="where">
	  <where>
	     1=1 
	     <if test="begDate != null">
	       and DATE_FORMAT(c.count_date,'%Y-%m-%d') >= DATE_FORMAT(#{begDate},'%Y-%m-%d')
	     </if>
	     <if test="endDate != null">
	       <![CDATA[and DATE_FORMAT(c.count_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
	     </if>
	     <if test="companyName != null and companyName != ''">
	       and c.company_title like CONCAT('%',#{companyName},'%')
	     </if>
	     <if test="companyId != null and companyId != ''">
	       and c.company_id =#{companyId}
	     </if>
	     <if test="groupId != null">
	       and c.group_id = #{groupId}
	     </if>
	     <if test="orderGroupId != null">
	       and c.order_group_id = #{orderGroupId}
	     </if>
	     <if test="personName != null and personName != ''">
	       and c.person_name like CONCAT('%',#{personName},'%')
	     </if>
	     <if test="personId != null and personId != ''">
	       and c.person_id = #{personId}
	     </if>
	  </where>
	</sql>

	<select id="findAll" resultMap="queryResultMap" parameterType="HashMap">
		select 
		<include refid="base_select"></include> 
		from 
		count_collection_assessment c
		<include refid="where"></include>
	</select>
	
	<select id="findAllCount" parameterType="HashMap" resultType="Integer">
		select count(1) from count_collection_assessment c
		<include refid="where"></include>
	</select>
	<!-- 累计 -->
	<select id="findAllByGroup" resultMap="queryResultMap" parameterType="HashMap">
		select c.person_id,
		       c.company_id,
		       c.group_id,
			   c.order_group_id,
		       c.person_name,
		       c.company_title,
		       c.group_name,
		       c.order_group_name,
		       sum(c.loan_money) as loan_money,
		       sum(c.repayment_money) as repayment_money,
		       sum(c.not_yet_repayment_money) as not_yet_repayment_money,
		       sum(c.penalty) as penalty,
		       sum(c.repayment_penalty) as repayment_penalty,
		       sum(c.not_repayment_penalty) as not_repayment_penalty,
		       sum(c.order_total) as order_total,
		       sum(c.dispose_order_num) as dispose_order_num,
		       sum(c.risk_order_num) as risk_order_num,
		       sum(c.repayment_order_num) as repayment_order_num
		from count_collection_assessment c
		<include refid="where"></include>
		group by c.person_id,c.order_group_id,c.company_id,c.group_id
	</select>
	<select id="findAllCountByGroup" resultType="Integer" parameterType="HashMap">
		select count(1) from (select count(1) as count_num,c.order_group_id
		from count_collection_assessment c
		<include refid="where"></include>
		group by c.person_id,c.order_group_id,c.company_id,c.group_id
		)temp
	</select>

	<!-- 考核统计-公司 -->
	<select id="findAllByCompany" resultMap="queryResultMap" parameterType="HashMap">
		select c.person_id,
		c.company_id,
		c.group_id,
		c.order_group_id,
		-- c.person_name,
		c.company_title,
		c.group_name,
		c.order_group_name,
		sum(c.loan_money) as loan_money,
		sum(c.repayment_money) as repayment_money,
		sum(c.not_yet_repayment_money) as not_yet_repayment_money,
		sum(c.penalty) as penalty,
		sum(c.repayment_penalty) as repayment_penalty,
		sum(c.not_repayment_penalty) as not_repayment_penalty,
		sum(c.order_total) as order_total,
		sum(c.dispose_order_num) as dispose_order_num,
		sum(c.risk_order_num) as risk_order_num,
		sum(c.repayment_order_num) as repayment_order_num
		from count_collection_assessment c
		<include refid="where"></include>
		group by c.company_id,c.group_id,c.order_group_id
	</select>
	<select id="findAllCountByCompany" resultType="Integer" parameterType="HashMap">
		select count(1) from (select count(1) as count_num,c.order_group_id
		from count_collection_assessment c
		<include refid="where"></include>
		group by c.company_id,c.group_id,c.order_group_id
		)temp
	</select>
	
	<sql id="base_select">
		c.person_name,c.company_id,
		c.company_title,c.group_name,c.order_group_name,
		c.loan_money,c.repayment_money,c.not_yet_repayment_money,
		c.repayment_reta,c.migrate_rate,c.penalty,c.repayment_penalty,
		c.not_repayment_penalty,c.penalty_repayment_reta,c.order_total,
		c.dispose_order_num,c.repayment_order_num,c.risk_order_num,c.repayment_order_rate,c.count_date 
	</sql>
	<!-- 根据主键获取单条记录 -->
	<select id="getOne" resultMap="queryResultMap" parameterType="com.info.web.pojo.cspojo.CountCollectionAssessment">
		SELECT
		<include refid="base_select"></include> 
		from 
		count_collection_assessment c 
		WHERE id = #{id}
	</select>
	<!-- 根据主键删除记录 -->
	<delete id="del" parameterType="com.info.web.pojo.cspojo.CountCollectionAssessment">
		DELETE 
		FROM 
		count_collection_v
		WHERE id = #{id}
	</delete>

	<insert id="insertExamineList" parameterType="java.util.List">
		insert into count_collection_assessment(
			  count_date,
			  company_title,
			  group_name ,
			  order_group_name,
			  person_name,
			  loan_money,
			  repayment_money ,
			  not_yet_repayment_money,
			  repayment_reta ,
			  migrate_rate,
			  penalty ,
			  repayment_penalty ,
			  not_repayment_penalty,
			  penalty_repayment_reta,
			  order_total,
			  dispose_order_num,
			  risk_order_num,
			  repayment_order_num,
			  repayment_order_rate,
			  person_id,
			  company_id,
			  group_id ,
			  order_group_id
			)
		  values
		<foreach collection="list" item="content"  open="" close="" separator=",">
			(#{content.countDate},
			#{content.companyTitle},
			#{content.groupName},
			#{content.groupOrderName},
			#{content.personName},
			#{content.loanMoney},
			#{content.repaymentMoney},
			#{content.notYetRepaymentMoney},
			#{content.repaymentReta},
			0,
			#{content.penalty},
			#{content.repaymentPenalty},
			#{content.notRepaymentPenalty},
			#{content.penaltyRepaymentReta},
			#{content.orderTotal},
			#{content.disposeOrderNum},
			0,
			#{content.repaymentOrderNum},
			#{content.repaymentOrderRate},
			#{content.personId},
			#{content.companyId},
			#{content.groupId},
			#{content.orderGroupId}
			)
		</foreach>
	</insert>

	<insert id="insertManageList" parameterType="java.util.List">
		insert into count_collection_manage(
			  count_date,
			  company_title,
			  group_name ,
			  order_group_name,
			  person_name,
			  loan_money,
			  repayment_money ,
			  not_yet_repayment_money,
			  repayment_reta ,
			  migrate_rate,
			  penalty ,
			  repayment_penalty ,
			  not_repayment_penalty,
			  penalty_repayment_reta,
			  order_total,
			  dispose_order_num,
			  repayment_order_num,
			  repayment_order_rate,
			  person_id,
			  company_id,
			  group_id,
			  order_group_id
		  )
		  values
		<foreach collection="list" item="content"  open="" close="" separator=",">
			(
				#{content.countDate},
				#{content.companyTitle},
				#{content.groupName},
				#{content.groupOrderName},
				#{content.personName},
				#{content.loanMoney},
				#{content.repaymentMoney},
				#{content.notYetRepaymentMoney},
				#{content.repaymentReta},
				0,
				#{content.penalty},
				#{content.repaymentPenalty},
				#{content.notRepaymentPenalty},
				#{content.penaltyRepaymentReta},
				#{content.orderTotal},
				#{content.disposeOrderNum},
				#{content.repaymentOrderNum},
				#{content.repaymentOrderRate},
				#{content.personId},
				#{content.companyId},
				#{content.groupId},
				#{content.orderGroupId}
			)
		</foreach>
	</insert>

	<!-- 定时任务查询考核统计 -->
	<select id="queryExamineList" parameterType="HashMap" resultMap="queryResultMap">
		<![CDATA[
			select
				  Dispatch_Time AS count_date,
				  Company_Name AS company_title,
				  Group_Name AS group_name,
				  Overdue_Level AS order_group_name,
				  user_name AS person_name,
				  sum(principle_amt) as loan_money,
				  sum(Repay_principle_Amt) as repayment_money,
				  sum(principle_amt)-sum(Repay_principle_Amt)  as not_yet_repayment_money,
				  if(sum(principle_amt)<sum(Repay_principle_Amt),'0' ,round(sum(Repay_principle_Amt)/sum(principle_amt)*100 ,2)) as repayment_reta,
				  /* 100-round(sum(Repay_principle_Amt)/sum(principle_amt)*100 ,2) as migrate_rate, */
				  sum(overdue_amt) as penalty,
				  sum(PayOverdue_Amt) as repayment_penalty,
				  sum(overdue_amt)-sum(PayOverdue_Amt) as not_repayment_penalty,
				  if(sum(overdue_amt) -sum(PayOverdue_Amt)<0,'0', round(sum(PayOverdue_Amt)/sum(overdue_amt)*100,2)) as penalty_repayment_reta,
				  sum(order_count) as order_total,
				  0 as dispose_order_num,
				  /* 0 as risk_order_num,*/
				  sum(repay_order_count) as repayment_order_num,
				  if(sum(order_count) -sum(repay_order_count)<0,'0', round(sum(repay_order_count)/sum(order_count)*100,2)) as repayment_order_rate,
				  current_collection_user_id AS person_id,
				  Company_ID AS company_id,
				  group_id AS group_id,
				  order_group_id AS order_group_id

				from (
					   /*Assignment 派单*/
					   (
						 SELECT

						   log.current_collection_user_id,
						   usr.user_name AS User_Name,
						   usr.company_id AS Company_ID,
						   usr.role_id AS Role_ID,
						   usr.group_level AS Group_Level,
						   cmp.title AS Company_Name,
						   dct.label AS Group_Name,
						   dct.value AS group_id,
						   dct1.value AS order_group_id,
						   dct1.label AS Overdue_Level,
						   log.loan_collection_order_id,
						   ord.order_id,
						   ord.loan_id AS Load_ID,
						   ord.pay_id AS Pay_ID,
						   IFNULL(ABS(dtl.real_money), (uln.loan_money)) AS Principle_Amt,
						   IF(ord.status=4,0,IFNULL(dtl.real_money, 0)) AS Repay_principle_Amt,
						   uln.loan_penalty AS Total_Overdue_Amt,
						   DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d') AS Last_Date_For_Pay,
						   DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
						   /*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) AS Overdue_Amt,*/
						   0 AS Overdue_Amt,
						   ord.overdueDays,
      						   /*IF(ord.status=4,0,IFNULL(dtl.real_penlty, 0)) AS PayOverdue_Amt,*/
						   0 AS PayOverdue_Amt,
						   ord.status AS Order_Status,
						   DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Time,
						   1 as order_count,
						   0 as repay_order_count
						 FROM
						   (SELECT
							  *
							FROM
							  mman_loan_collection_status_change_log
							WHERE
							  id IN (SELECT
 							               id
									 FROM
					                (SELECT
					                    id,
					                        create_date,
					                        @row_number:=CASE
					                            WHEN @order_id = lg.loan_collection_order_id THEN @row_number + 1
					                            ELSE 1
					                        END AS row_num,
					                        @order_id:=lg.loan_collection_order_id AS order_id
					                FROM
					                    mman_loan_collection_status_change_log lg, (SELECT @order_id:=0, @row_number:=0) AS t
					                WHERE
					                    lg.type IN (1 , 2, 3, 4)
					                        AND DATE_FORMAT(lg.create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
					                       /* AND lg.loan_collection_order_id = 38714835028638023*/
					                ORDER BY lg.loan_collection_order_id , lg.create_date DESC) pp
					            WHERE
					                row_num = 1) ) AS log
						   INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
						   INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
						   INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
						   INNER JOIN sys_dict dct ON usr.group_level = dct.value
													  AND dct.type = 'collection_group'
						   INNER JOIN sys_dict dct1 ON log.current_collection_order_level  = dct1.value
													   AND dct1.type = 'xjx_overdue_level'
						   INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id
						   LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
																   AND IFNULL(dtl.current_collection_user_id, log.current_collection_user_id) = log.current_collection_user_id
																   AND (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
																		OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))
						 WHERE
						   usr.role_id = 10021
						 /*
					   and usr.user_name='梁萌'
						  and log.loan_collection_order_id=10614873104989197   */
						 ORDER BY ord.loan_id
					   )

					   union all
					   /* 转单 */
					   (
						 SELECT
						   log.current_collection_user_id,
						   usr.user_name AS User_Name,
						   usr.company_id AS Company_ID,
						   usr.role_id AS Role_ID,
						   usr.group_level AS Group_Level,
						   cmp.title AS Company_Name,
						   dct.label AS Group_Name,
						   dct.value AS group_id,
						   dct1.value AS order_group_id,
						   dct1.label AS Overdue_Level,
						   log.loan_collection_order_id,
						   ord.order_id,
						   ord.loan_id AS Load_ID,
						   ord.pay_id AS Pay_ID,
								if(log.seq = 2,IFNULL(ABS(dtl.real_money), (uln.loan_money)) * (- 1),0) AS Principle_Amt,

						   IFNULL(dtl.real_money, 0) AS Repay_principle_Amt,
						   uln.loan_penalty AS Total_Overdue_Amt,
						   DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d') AS Last_Date_For_Pay,
						   DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
					            /*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) * (- 1) AS Overdue_Amt,*/
						   0 AS Overdue_Amt,
						   ord.overdueDays,
 					           /*IFNULL(dtl.real_penlty, 0) AS PayOverdue_Amt,*/
						   0 AS PayOverdue_Amt,
						   ord.status AS Order_Status,
						   /*DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Time,*/
						   DATE_FORMAT(#{currDate}, '%Y-%m-%d') as Dispatch_Time,
						   if(log.seq = 2,-1,0) AS order_count,
						   0 as repay_order_count
							FROM
						   ( select lg.* from
									(
										SELECT
											*
										FROM
											(
												SELECT
													*
												FROM

													(
														SELECT
															@row_number := CASE
														WHEN @order_id = lg.loan_collection_order_id THEN
															@row_number + 1
														ELSE
															1
														END AS row_num,
														@order_id := lg.loan_collection_order_id AS order_id,
														lg.type,
														lg.current_collection_user_id,
														lg.current_collection_user_level,
														lg.current_collection_Order_Level,
														lg.create_date,
														lg.loan_collection_order_id,
														lg.seq
													FROM
														(
															SELECT
																lg1.*, 1 AS seq
															FROM
																mman_loan_collection_status_change_log lg1
															WHERE
																lg1.TYPE = 2
															AND DATE_FORMAT(lg1.create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
															UNION ALL
																SELECT
																	lg2.*, 2 AS seq
																FROM
																	mman_loan_collection_status_change_log lg2
																WHERE
																	DATE_FORMAT(lg2.create_date, '%Y-%m-%d') < DATE_FORMAT(#{currDate}, '%Y-%m-%d')
														) lg,
														(
															SELECT
																@order_id := 0,
																@row_number := 0
														) AS t

													ORDER BY
														lg.loan_collection_order_id,
														lg.seq,
														lg.create_date DESC
													) lg3
												WHERE
													row_num = 1
                         -- and loan_collection_order_id  = 99814888781360778
											) lg4
									) lg
									INNER JOIN (
										SELECT
											id,
											type,
											create_date,
											order_id,
                      loan_collection_order_id
										FROM
											(
												SELECT
													id,
                          loan_collection_order_id,
													type,
													create_date,
													@row_number := CASE
												WHEN @order_id = lg.loan_collection_order_id THEN
													@row_number + 1
												ELSE
													1
												END AS row_num,
												@order_id := lg.loan_collection_order_id AS order_id
											FROM
												mman_loan_collection_status_change_log lg,
												(
													SELECT
														@order_id := 0,
														@row_number := 0
												) AS t
											WHERE
												lg.type IN (3, 4)
											AND DATE_FORMAT(lg.create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
-- 											AND lg.loan_collection_order_id = 10714837753583991
											ORDER BY
												lg.loan_collection_order_id,
												lg.create_date DESC
											) pp
										WHERE
											row_num = 1
									) A2 ON lg.loan_collection_order_id = A2.loan_collection_order_id
								) AS log
						   INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
						   INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
						   INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
						   INNER JOIN sys_dict dct ON usr.group_level = dct.value
													  AND dct.type = 'collection_group'
						   INNER JOIN sys_dict dct1 ON log.current_collection_order_level  = dct1.value
													   AND dct1.type = 'xjx_overdue_level'
						   INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id
						   LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
																   AND IFNULL(dtl.current_collection_user_id, log.current_collection_user_id) = log.current_collection_user_id
																   AND (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
																		OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))
						 WHERE
						   usr.role_id = 10021
						 /*
						   and log.loan_collection_order_id=10614873104989197
						   and usr.user_name='吴怡稼'*/
						 ORDER BY ord.loan_id
					   )

					   union all
					   (
						 SELECT
						   log.current_collection_user_id,
						   usr.user_name AS User_Name,
						   usr.company_id AS Company_ID,
						   usr.role_id AS Role_ID,
						   usr.group_level AS Group_Level,
						   cmp.title AS Company_Name,
						   dct.label AS Group_Name,
						   dct.value AS group_id,
						   dct1.value AS order_group_id,
						   dct1.label AS Overdue_Level,
						   log.loan_collection_order_id,
						   ord.order_id,
						   ord.loan_id AS Load_ID,
						   ord.pay_id AS Pay_ID,
						   0 as Principle_Amt ,
 					           IFNULL(abs(dtl.realget_principle), 0) AS Repay_principle_Amt,
						   abs(uln.loan_penalty)  AS Total_Overdue_Amt,
						   DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d') AS Last_Date_For_Pay,
						   DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
						   /*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) AS Overdue_Amt,*/
						   /*0 as Overdue_Amt,*/
					           /*TIMESTAMPDIFF(DAY, DATE_FORMAT(before_pay_date, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d'))* (uln.loan_money * 0.02) AS Overdue_Amt,*/
					       abs(uln.loan_penalty)  as Overdue_Amt,
						   ord.overdueDays,
						   if(ac.`status` = 5,dtl.realget_interest,dtl.realget_interest - dtl.reduction_money) AS PayOverdue_Amt,
--        					   IFNULL(dtl.realget_interest - dtl.reduction_money, 0) AS PayOverdue_Amt,
						   ord.status AS Order_Status,
						   DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Success_Time,
						   0 as order_count,
						   1 as repay_order_count
						 FROM
						   (SELECT
							  (SELECT
								 MAX(create_date) AS before_pay_date
							   FROM
								 mman_loan_collection_status_change_log bg
							   WHERE
								 bg.current_collection_user_id = lg.current_collection_user_id
								 AND bg.loan_collection_order_id = lg.loan_collection_order_id
								 AND bg.type <> 5) AS before_pay_date,
							  lg.*
							FROM
							  mman_loan_collection_status_change_log lg
							WHERE
							  id IN (SELECT
									   MAX(id) AS id
									 FROM
									   mman_loan_collection_status_change_log
									 WHERE
									   type IN (5)
									   AND DATE_FORMAT(create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
									 GROUP BY loan_collection_order_id)) AS log
						   INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
						   INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
						   INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
						   INNER JOIN sys_dict dct ON usr.group_level = dct.value
													  AND dct.type = 'collection_group'
						   INNER JOIN sys_dict dct1 ON log.current_collection_order_level = dct1.value
													   AND dct1.type = 'xjx_overdue_level'
						   INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id
						    /*LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
						        AND IFNULL(dtl.current_collection_user_id, log.current_collection_user_id) = log.current_collection_user_id
						        AND (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
						        OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))*/
							LEFT JOIN credit_loan_pay dtl on ord.loan_id = dtl.loan_id
							LEFT JOIN audit_center ac on ac.loan_id = ord.loan_id and (ac.status = 5 or ac.status = 2)
						    /*and  (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
						        OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))*/
						 WHERE
						   usr.role_id = 10021
						 /*
						  and log.loan_collection_order_id=10614873104989197
						 and usr.user_name='梁萌'*/
						 ORDER BY ord.loan_id)

					 ) tt group by Dispatch_Time ,
				  Company_Name,
				  current_collection_user_id,
				  Group_Name,
				  Overdue_Level,
				  user_name
		]]>
	</select>

	<!-- 定时任务查询管理统计 -->
	<select id="queryManageList" parameterType="HashMap" resultMap="queryResultMap">
		<![CDATA[

			select
					Dispatch_Time AS count_date,
					Company_Name AS company_title,
					Group_Name AS group_name,
					Overdue_Level AS order_group_name,
					user_name AS person_name,
					sum(principle_amt) as loan_money,
					sum(Repay_principle_Amt) as repayment_money,
					sum(principle_amt)-sum(Repay_principle_Amt)  as not_yet_repayment_money,
					if(sum(principle_amt)<sum(Repay_principle_Amt),'0' ,round(sum(Repay_principle_Amt)/sum(principle_amt)*100 ,2)) as repayment_reta,
					/* 100-round(sum(Repay_principle_Amt)/sum(principle_amt)*100 ,2) as migrate_rate, */
					sum(overdue_amt) as penalty,
					sum(PayOverdue_Amt) as repayment_penalty,
					sum(overdue_amt)-sum(PayOverdue_Amt) as not_repayment_penalty,
					if(sum(overdue_amt) -sum(PayOverdue_Amt)<0,'0', round(sum(PayOverdue_Amt)/sum(overdue_amt)*100,2)) as penalty_repayment_reta,
					sum(order_count) as order_total,
					0 as dispose_order_num,
					/* 0 as risk_order_num,*/
					sum(repay_order_count) as repayment_order_num,
					if(sum(order_count) -sum(repay_order_count)<0,'0', round(sum(repay_order_count)/sum(order_count)*100,2)) as repayment_order_rate,
					current_collection_user_id AS person_id,
					Company_ID AS company_id,
					group_id AS group_id,
					order_group_id AS order_group_id

			FROM
				(
					/*Assignment 派单*/
					(
						SELECT
							log.current_collection_user_id,
							usr.user_name AS User_Name,
							usr.company_id AS Company_ID,
							usr.role_id AS Role_ID,
							usr.group_level AS Group_Level,
							cmp.title AS Company_Name,
							dct.label AS Group_Name,
							dct.VALUE AS group_id,
							dct1.VALUE AS order_group_id,
							dct1.label AS Overdue_Level,
							log.loan_collection_order_id,
							ord.order_id,
							ord.loan_id AS Load_ID,
							ord.pay_id AS Pay_ID,
							IFNULL(
								ABS(dtl.real_money),
								(uln.loan_money)
							) AS Principle_Amt,

						IF (
							ord. STATUS = 4,
							0,
							IFNULL(dtl.real_money, 0)
						) AS Repay_principle_Amt,
						uln.loan_penalty AS Total_Overdue_Amt,
						DATE_FORMAT(
							uln.loan_end_time,
							'%Y-%m-%d'
						) AS Last_Date_For_Pay,
						DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
						/*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) AS Overdue_Amt,*/
						0 AS Overdue_Amt,
						ord.overdueDays,
						/*IF(ord.status=4,0,IFNULL(dtl.real_penlty, 0)) AS PayOverdue_Amt,*/
						0 AS PayOverdue_Amt,
						ord. STATUS AS Order_Status,
						DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Time,
						1 AS order_count,
						0 AS repay_order_count
					FROM
						(
							SELECT
								*
							FROM
								mman_loan_collection_status_change_log
							WHERE
								id IN (
									SELECT
										id
									FROM
										(
											SELECT
												id,
												create_date,
												@row_number := CASE
											WHEN @order_id = lg.loan_collection_order_id THEN
												@row_number + 1
											ELSE
												1
											END AS row_num,
											@order_id := lg.loan_collection_order_id AS order_id
										FROM
											mman_loan_collection_status_change_log lg,
											(
												SELECT
													@order_id := 0,
													@row_number := 0
											) AS t
										WHERE
											lg.type IN (1, 2, 3, 4)
										AND DATE_FORMAT(lg.create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d') /* AND lg.loan_collection_order_id = 38714835028638023*/
										ORDER BY
											lg.loan_collection_order_id,
											lg.create_date DESC
										) pp
									WHERE
										row_num = 1
								)
						) AS log
					INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
					INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
					INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
					INNER JOIN sys_dict dct ON usr.group_level = dct.
					VALUE

					AND dct.type = 'collection_group'
					INNER JOIN sys_dict dct1 ON log.current_collection_order_level = dct1.
					VALUE

					AND dct1.type = 'xjx_overdue_level'
					INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id
					LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
					AND IFNULL(
						dtl.current_collection_user_id,
						log.current_collection_user_id
					) = log.current_collection_user_id
					AND (
						DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
						OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
					)
					WHERE
						usr.role_id = 10021 /*
									   and usr.user_name='梁萌'
										  and log.loan_collection_order_id=10614873104989197   */
					ORDER BY
						ord.loan_id
					)
					UNION ALL
						/* 转单 */
						(
							SELECT
								log.current_collection_user_id,
								usr.user_name AS User_Name,
								usr.company_id AS Company_ID,
								usr.role_id AS Role_ID,
								usr.group_level AS Group_Level,
								cmp.title AS Company_Name,
								dct.label AS Group_Name,
								dct.
							VALUE
								AS group_id,
								dct1.
							VALUE
								AS order_group_id,
								dct1.label AS Overdue_Level,
								log.loan_collection_order_id,
								ord.order_id,
								ord.loan_id AS Load_ID,
								ord.pay_id AS Pay_ID,
								IFNULL(
									ABS(dtl.real_money),
									(uln.loan_money)
								) * (- 1) AS Principle_Amt,
								IFNULL(dtl.real_money, 0) AS Repay_principle_Amt,
								uln.loan_penalty AS Total_Overdue_Amt,
								DATE_FORMAT(
									uln.loan_end_time,
									'%Y-%m-%d'
								) AS Last_Date_For_Pay,
								DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
								/*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) * (- 1) AS Overdue_Amt,*/
								0 AS Overdue_Amt,
								ord.overdueDays,
								/*IFNULL(dtl.real_penlty, 0) AS PayOverdue_Amt,*/
								0 AS PayOverdue_Amt,
								ord. STATUS AS Order_Status,
								/*DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Time,*/
								DATE_FORMAT(#{currDate}, '%Y-%m-%d') AS Dispatch_Time,
								(- 1) AS order_count,
								0 AS repay_order_count
							FROM
								(
									SELECT
										*
									FROM
										(
											SELECT
												@row_number := CASE
											WHEN @order_id = trs.loan_collection_order_id THEN
												@row_number + 1
											ELSE
												1
											END AS row_num,
											@order_id := trs.loan_collection_order_id AS order_id,
											trs.*
										FROM
											(
												SELECT
													a1.*
												FROM
													mman_loan_collection_status_change_log a1
												INNER JOIN (
													SELECT
														MAX(id) AS id,
														loan_collection_order_id,
														MAX(Create_date) AS create_date
													FROM
														mman_loan_collection_status_change_log
													WHERE
														type IN (3, 4)
													AND DATE_FORMAT(create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
													GROUP BY
														loan_collection_order_id
												) a2 ON a1.loan_collection_order_id = a2.loan_collection_order_id
												AND DATE_FORMAT(a1.create_date, '%Y-%m-%d') < DATE_FORMAT(a2.create_date, '%Y-%m-%d')
											) trs,
											(
												SELECT
													@order_id := 0,
													@row_number := 0
											) AS t
										ORDER BY
											trs.loan_collection_order_id,
											trs.create_date DESC
										) tt
									WHERE
										row_num = 1
								) AS log
							INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
							INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
							INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
							INNER JOIN sys_dict dct ON usr.group_level = dct.
							VALUE

							AND dct.type = 'collection_group'
							INNER JOIN sys_dict dct1 ON log.current_collection_order_level = dct1.
							VALUE

							AND dct1.type = 'xjx_overdue_level'
							INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id
							LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
							AND IFNULL(
								dtl.current_collection_user_id,
								log.current_collection_user_id
							) = log.current_collection_user_id
							AND (
								DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
								OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
							)
							WHERE
								usr.role_id = 10021 /*
										   and log.loan_collection_order_id=10614873104989197
										   and usr.user_name='梁萌'*/
							ORDER BY
								ord.loan_id
						)
					UNION ALL
						(
							SELECT
								log.current_collection_user_id,
								usr.user_name AS User_Name,
								usr.company_id AS Company_ID,
								usr.role_id AS Role_ID,
								usr.group_level AS Group_Level,
								cmp.title AS Company_Name,
								dct.label AS Group_Name,
								dct.
							VALUE
								AS group_id,
								dct1.
							VALUE
								AS order_group_id,
								dct1.label AS Overdue_Level,
								log.loan_collection_order_id,
								ord.order_id,
								ord.loan_id AS Load_ID,
								ord.pay_id AS Pay_ID,
								0 AS Principle_Amt,
								IFNULL(
									abs(dtl.realget_principle),
									0
								) AS Repay_principle_Amt,
								abs(uln.loan_penalty) AS Total_Overdue_Amt,
								DATE_FORMAT(
									uln.loan_end_time,
									'%Y-%m-%d'
								) AS Last_Date_For_Pay,
								DATE_FORMAT(log.create_date, '%Y-%m-%d') AS assignment_date,
								/*TIMESTAMPDIFF(DAY, DATE_FORMAT(uln.loan_end_time, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d')) * (uln.loan_money * 0.02) AS Overdue_Amt,*/
								/*0 as Overdue_Amt,*/
								/*TIMESTAMPDIFF(DAY, DATE_FORMAT(before_pay_date, '%Y-%m-%d'), DATE_FORMAT(log.create_date, '%Y-%m-%d'))* (uln.loan_money * 0.02) AS Overdue_Amt,*/
								abs(uln.loan_penalty) AS Overdue_Amt,
								ord.overdueDays,
								IFNULL(dtl.realget_interest - dtl.reduction_money, 0) AS PayOverdue_Amt,
								ord. STATUS AS Order_Status,
								/*DATE_FORMAT(log.create_date, '%Y-%m-%d') AS Dispatch_Success_Time,*/
								DATE_FORMAT(#{currDate}, '%Y-%m-%d') AS Dispatch_Success_Time,
                                0 AS order_count,
								1 AS repay_order_count
							FROM
								(
									SELECT
										asg.create_date AS current_create_date,
										suc.*
									FROM
										(
											SELECT
												*
											FROM
												mman_loan_collection_status_change_log
											WHERE
												id IN (
													SELECT
														MAX(id) AS id
													FROM
														mman_loan_collection_status_change_log
													WHERE
														type IN (1, 2, 3, 4)
													AND DATE_FORMAT(create_date, '%Y-%m-%d') = DATE_FORMAT(#{currDate}, '%Y-%m-%d')
													GROUP BY
														loan_collection_order_id
												)
										) asg
									INNER JOIN (
										SELECT
											*
										FROM
											mman_loan_collection_status_change_log
										WHERE
											type = 5
									) suc ON asg.loan_collection_order_id = suc.loan_collection_order_id
									GROUP BY
										asg.loan_collection_order_id
								) AS log
							INNER JOIN mman_loan_collection_order ord ON log.loan_collection_order_id = ord.order_id
							INNER JOIN back_user usr ON log.current_collection_user_id = usr.uuid
							INNER JOIN mman_loan_collection_company cmp ON usr.company_id = cmp.id
							INNER JOIN sys_dict dct ON usr.group_level = dct.
							VALUE

							AND dct.type = 'collection_group'
							INNER JOIN sys_dict dct1 ON log.current_collection_order_level = dct1.
							VALUE

							AND dct1.type = 'xjx_overdue_level'
							INNER JOIN mman_user_loan uln ON ord.loan_id = uln.id /*LEFT JOIN credit_loan_pay_detail dtl ON ord.pay_id = dtl.pay_id
												AND IFNULL(dtl.current_collection_user_id, log.current_collection_user_id) = log.current_collection_user_id
												AND (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
												OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))*/
							LEFT JOIN credit_loan_pay dtl ON ord.loan_id = dtl.loan_id /*and  (DATE_FORMAT(dtl.create_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d')
												OR DATE_FORMAT(dtl.update_date, '%Y-%m-%d') = DATE_FORMAT(log.create_date, '%Y-%m-%d'))*/
							WHERE
								usr.role_id = 10021 /*  AND user_name = '周和刚'
						  and log.loan_collection_order_id=10614873104989197*/
							ORDER BY
								ord.loan_id
						)
				) tt
			GROUP BY
				Dispatch_Time,
				Company_Name,
				current_collection_user_id,
				Group_Name,
				Overdue_Level,
				user_name

		]]>
	</select>


	<delete id="deleteManageList" parameterType="HashMap">
		<![CDATA[
			DELETE
			FROM
			count_collection_manage
			WHERE
			DATE_FORMAT(count_date, '%Y-%m-%d') >= DATE_FORMAT(#{begDate}, '%Y-%m-%d')
			AND DATE_FORMAT(count_date, '%Y-%m-%d') <= DATE_FORMAT(#{endDate}, '%Y-%m-%d');
		]]>
	</delete>
</mapper>
